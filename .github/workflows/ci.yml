name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio coverage black ruff mypy

    - name: Lint with ruff
      run: |
        ruff check mono_banking_mcp/ tests/
        
    - name: Format check with black
      run: |
        black --check mono_banking_mcp/ tests/

    - name: Type check with mypy
      run: |
        mypy mono_banking_mcp/ --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=mono_banking_mcp --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false

    - name: Test MCP server initialization
      run: |
        python -c "
        import asyncio
        from mono_banking_mcp.server import mcp
        
        async def test_init():
            tools = await mcp.list_tools()
            print(f'Successfully loaded {len(tools)} MCP tools')
            assert len(tools) >= 11
            
        asyncio.run(test_init())
        "

  integration-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-asyncio

    - name: Run integration tests
      env:
        MONO_SECRET_KEY: ${{ secrets.MONO_SECRET_KEY }}
      run: |
        pytest tests/ -v -m integration --tb=short
      if: env.MONO_SECRET_KEY != ''

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r mono_banking_mcp/ -f json -o bandit-report.json || true
        bandit -r mono_banking_mcp/

    - name: Run safety check for dependencies
      run: |
        safety check --json --output safety-report.json || true
        safety check

  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: |
        python -m build

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import mono_banking_mcp; print('Package installed successfully')"

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-asyncio pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/ -v -k "test_concurrent_tool_calls or test_large_transaction_history" --tb=short
